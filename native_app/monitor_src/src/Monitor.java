/** 
 *  Monitor.java
 *
 *  VERSION: 2021.03.30
 *  AUTHORS: Rae Bouldin
 *
 *  DESCRIPTION:
 *    Contains methods to create, read from, and delete an output file that 
 *    holds data about the System resources and about Open Hardware Monitor's 
 *    Power Sensors.
 * 
 *  Written for Dr. Cameron's Systems & Networking Capstone at Virginia Tech.
 */
package src;

import java.io.File;
import java.io.IOException;

public class Monitor {

    private final static String POWER_POWERSHELL_SCRIPT = "./powershell_scripts/sendPowerDataToCSV.ps1";
    private final static String POWER_DATA_FILEPATH = "./monitor_POW_output.csv";

    private final static int PINDEX_NAME = 0;
    private final static int PINDEX_SENSORTYPE = 1;
    private final static int PINDEX_VALUE = 2;
    private final static int PINDEX_PROCESSID = 3;
    
    private final static String RESOURCE_POWERSHELL_SCRIPT = "./powershell_scripts/sendResourceDataToCSV.ps1";
    private final static String RESOURCE_DATA_FILEPATH = "./monitor_RES_output.csv";
    
    private final static int RINDEX_VALUE = 1;

    
    public static void updateData() throws IOException {
    	
    	updatePowerData();
    	updateResourceData();
    	
    }

    
    public static boolean deleteOutputFiles() {
    	
    	File powerDataFile = new File(POWER_DATA_FILEPATH);
    	File resourceDataFile = new File(RESOURCE_DATA_FILEPATH);
    	
    	boolean powerFileDeleted = powerDataFile.delete();
    	boolean resourceFileDeleted = resourceDataFile.delete();
    	
    	return powerFileDeleted && resourceFileDeleted;
    	
    }
    
    
    
    /*
    --------------------------------------------------------------------------
    -                                                                        -
    -                             POWER MONITORING                           -
    -                                                                        -
    --------------------------------------------------------------------------
    */
    
    
    /**
     *  Calls the POWER_POWERSHELL_SCRIPT to update the contents of the file at
     *  the POWER_DATA_FILEPATH.
     */
    public static void updatePowerData() throws IOException {

        PowerShellController.runPowerShellScript(POWER_POWERSHELL_SCRIPT);

    }

    
    /**
     *  Deletes any output files generated by updatePowerData().
     */
    public static boolean deletePowerOutputFiles() {
    	
        File dataFile = new File(POWER_DATA_FILEPATH);
        return dataFile.delete();
        
    }
    

    /** 
     *  Looks for the row in POWER_DATA_FILEPATH with the specified key, then 
     *  returns its Name as a String. Returns null if the Name couldn't be 
     *  found or if something else goes wrong.
     * 
     *  Note: You should call updatePowerData() at least once before calling 
     *  this method.
     */
    public static String getPowerSensorName(String key) throws IOException {

        return CSVHandler.getElementWithoutQuotes(POWER_DATA_FILEPATH, key, PINDEX_NAME);

    }

    /** 
     *  Looks for the row in POWER_DATA_FILEPATH with the specified key, then 
     *  returns its SensorType as a String. Returns null if the SensorType 
     *  couldn't be found or if something else goes wrong.
     * 
     *  Note: You should call updatePowerData() at least once before calling 
     *  this method.
     */
    public static String getPowerSensorType(String key) throws IOException {

        return CSVHandler.getElementWithoutQuotes(POWER_DATA_FILEPATH, key, PINDEX_SENSORTYPE);

    }

    /** 
     *  Looks for the row in POWER_DATA_FILEPATH with the specified key, then 
     *  returns its Value (in W) as a double. Returns NaN if the Value couldn't 
     *  be found or if something else goes wrong.
     * 
     *  Note: You should call updatePowerData() at least once before calling 
     *  this method.
     */
    public static double getPowerSensorValue(String key) throws IOException {

        String val = CSVHandler.getElementWithoutQuotes(POWER_DATA_FILEPATH, key, PINDEX_VALUE);
        if (val != null) {
            return Double.parseDouble(val);
        }
        return Double.NaN;

    }

    /** 
     *  Looks for the row in POWER_DATA_FILEPATH with the specified key, then 
     *  returns its ProcessId as a String. Returns null if the ProcessId 
     *  couldn't be found or if something else goes wrong.
     * 
     *  Note: You should call updatePowerData() at least once before calling 
     *  this method.
     */
    public static String getPowerSensorProcessID(String key) throws IOException {

        return CSVHandler.getElementWithoutQuotes(POWER_DATA_FILEPATH, key, PINDEX_PROCESSID);

    }
    
    
    
    /*
     --------------------------------------------------------------------------
     -                                                                        -
     -                           RESOURCE MONITORING                          -
     -                                                                        -
     --------------------------------------------------------------------------
     */
    
    
    /**
     *  Calls the RESOURCE_POWERSHELL_SCRIPT to update the contents of the file
     *  at the RESOURCE_DATA_FILEPATH.
     */
    public static void updateResourceData() throws IOException {

        PowerShellController.runPowerShellScript(RESOURCE_POWERSHELL_SCRIPT);

    }
    
    
    /**
     *  Deletes any output files generated by updateResourceData().
     */
    public static boolean deleteResourceOutputFiles() {
    	
        File dataFile = new File(RESOURCE_DATA_FILEPATH);
        return dataFile.delete();
        
    }
    
    
    /** 
     *  Looks for the row in RESOURCE_DATA_FILEPATH with the specified key, 
     *  "Memory Total" then returns its Value (in ?). Returns NaN if the Value 
     *  couldn't be found or if something else goes wrong.
     * 
     *  Note: You should call updateResourceData() at least once before calling 
     *  this method.
     */
    public static double getMemoryTotal() throws IOException {

        String val = 
        		CSVHandler.getElementWithoutQuotes(RESOURCE_DATA_FILEPATH, "Memory Total", RINDEX_VALUE);
        
        if (val != null) {
            return Double.parseDouble(val);
        }
        
        return Double.NaN;

    }

    
    /** 
     *  Looks for the row in RESOURCE_DATA_FILEPATH with the specified key, 
     *  "CPU Total" then returns its Value (represented as a percent %). 
     *  Returns NaN if the Value couldn't be found or if something else goes 
     *  wrong.
     * 
     *  Note: You should call updateResourceData() at least once before calling 
     *  this method.
     */
    public static double getCPUTotal() throws IOException {

        String val = 
        		CSVHandler.getElementWithoutQuotes(RESOURCE_DATA_FILEPATH, "CPU Total", RINDEX_VALUE);
        
        if (val != null) {
            return Double.parseDouble(val);
        }
        
        return Double.NaN;

    }

    
    /** 
     *  Looks for the row in RESOURCE_DATA_FILEPATH with the specified key, 
     *  "GPU Memory" then returns its Value (represented as a percent %). 
     *  Returns NaN if the Value couldn't be found or if something else goes 
     *  wrong.
     * 
     *  Note: You should call updateResourceData() at least once before calling 
     *  this method.
     */
    public static double getGPUMemory() throws IOException {

        String val = 
        		CSVHandler.getElementWithoutQuotes(RESOURCE_DATA_FILEPATH, "GPU Memory", RINDEX_VALUE);
        
        if (val != null) {
            return Double.parseDouble(val);
        }
        
        return Double.NaN;

    }
    
    
}